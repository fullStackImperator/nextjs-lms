datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets = ["native", "darwin-arm64"]
}


model User {
  id          String @id @default(uuid())
  userName    String?
  firstName   String
  lastName    String
  email       String
  isTeacher   Boolean?
  isAdmin     Boolean?

  // createdAt   DateTime 
  // updatedAt   DateTime
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  prerequisites String? @db.Text
  vorkenntnisse String? @db.Text
  kompetenzen String? @db.Text
  imageUrl String? @db.Text
  price Float?
  level Int?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]
  // requirements String[] // List of requirements for the course


  gradings Grading[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}


model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade )

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}


model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  descriptionEditor Json? @db.Json
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}


model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String? 

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)  
}

model UserProgress{
  id String @id @default(uuid())
  userId String

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)  

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Grading {
  id         String  @id @default(uuid())
  userId     String

  points     Int

  courseId   String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}


model Badge {
  id        String   @id @default(uuid())
  name      String   @unique
  imageUrl  String

  userBadges UserBadge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model UserBadge {
  id      String   @id @default(uuid())
  userId  String

  badgeId String
  badge   Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, badgeId], name: "unique_user_badge")
}